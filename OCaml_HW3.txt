(*Jelena Glišić, 89191008, MA2-EN*)

(*Travel Agency*)
type experience= Beginner | Intermediate | Experienced | WorldClass | AI;;

class driver e r=
    object(self) 
        val mutable exp:experience= e
        val mutable range:float= r
        method get_range= range
        method get_exp= exp
        method set_exp e= exp<-e
        method set_range r= range<-r
        method toString= let string_of_exp ex = match ex with 
                |Beginner-> "Begginer"
                |Intermediate-> "Intermediate"
                |Experienced-> "Experienced"
                |WorldClass-> "WorldClass"
                |AI-> "AI" in
            let s= "Your driver is of " ^ (string_of_exp exp) ^ " experience. They can drive at most " ^ 
            (string_of_float  range) ^ " km.\n" in print_string s
    end;;
        
class bus r e f m= 
    object(self)
        val mutable free:int= m
        val mutable range:float= r
        val mutable rent:float= e
        val mutable fuel:float= f
        val max:int= m
        method get_free= free
        method get_range= range
        method get_rent= rent
        method get_fuel= fuel
        method get_max= max
        method set_free fp= free<-fp
        method set_range r= range<-r
        method set_rent e= rent<-e
        method set_fuel f= fuel<-f
        method toString= let s= "This bus has " ^ (string_of_int free) ^ "/" ^ (string_of_int max) ^
            " free places, can drive at most " ^ (string_of_float range) ^ "km. The drive costs " ^ 
            (string_of_float rent) ^ "EUR/passenger and the fuel cost is " ^ (string_of_float fuel) ^ "EUR/km.\n" in
            print_string s
        method addPassenger n= if free>=n then (free<-free-n; true) else false
       end;;
       
exception NotAvailable of string
class travelAgency b m d p= 
    object(self)
        val mutable buslist: bus list= b
        val mutable driverlist: driver list= d
        val max: int= m
        val mutable pairlist: (bus*driver) list= p
        method get_buses= buslist
        method get_drivers= driverlist
        method get_max= max
        method get_pairs= pairlist
        method set_buses l= buslist<-l
        method set_drivers l= driverlist<-l
        method set_pairs l= pairlist<-l
        method toString= let s= "The agency has " ^ (string_of_int (List.length buslist)) ^ 
            " available buses and " ^ (string_of_int (List.length driverlist)) ^ " employed drivers, along with " ^ 
            (string_of_int (List.length pairlist)) ^ " possible bus/driver combinations.\n" in print_string s
        method addBus b= if (List.length buslist < max) then (buslist<-buslist@[b]; true) else false  
        method addDriver d= driverlist<- driverlist@[d]
        method randomSchedule= let shuffle d=
            let nd= List.map (fun c->(Random.bits (), c)) d in
            let sond= List.sort compare nd in List.map snd sond in
            pairlist<-List.map (fun x-> (x,List.hd (shuffle driverlist))) buslist
        method rentBus p d= self#randomSchedule;
            let driverCost driver= match driver#get_exp with 
                |Beginner-> 1.
                |Intermediate-> 2.
                |Experienced-> 3.
                |WorldClass-> 5.
                |AI-> 20. in
            let pairCost pair= (fst pair)#get_rent +. (fst pair)#get_fuel +. (driverCost (snd pair)) in
            let rec findMin l m= match l with
                |[]-> m
                |h::t-> if (pairCost m)>(pairCost h) then findMin t h else findMin t m in
            let check (pair:bus*driver):bool= (fst pair)#get_range>=d && (snd pair)#get_range>=d && (fst pair)#get_free>=p in
            let available= List.filter check pairlist in
            if (List.length available)>0 then (findMin available (List.hd available)) else raise(NotAvailable "No journey available") 
        method optimizedRent p d= 
            let busCost (b:bus):float= b#get_fuel+.b#get_rent and
            driverCost driver= match driver#get_exp with 
                |Beginner-> 1.
                |Intermediate-> 2.
                |Experienced-> 3.
                |WorldClass-> 5.
                |AI-> 20. in
            let rec bestBus l m= match l with
                |[]-> m
                |h::t-> if (busCost m)>(busCost h) then bestBus t h else bestBus t m and
            bestDriver l m= match l with
                |[]-> m
                |h::t-> if (driverCost m)>(driverCost h) then bestDriver t h else bestDriver t m in
            let availBuses=List.filter (fun x-> x#get_range>=d && x#get_free>=p) buslist and
            availDrivers= List.filter (fun x-> x#get_range>=d) driverlist in 
            if (List.length availBuses)>0 && (List.length availDrivers)>0
            then (bestBus availBuses (List.hd availBuses), bestDriver availDrivers (List.hd availDrivers))
            else raise(NotAvailable "No journey available")
    end;;
        

(*Infectious Nodes*)
type graph_term= {nodes : char list; edges : (char * float * char) list};;

let oneStepInfection graph node= 
    let get_start edge= match edge with (x,_,_)->x and get_weight edge= match edge with (_,x,_)->x and get_end edge= match edge with (_,_,x)->x in
    let infected= List.filter (fun x->(get_start x)=node && (get_weight x)>0.6) graph.edges in
    node::(List.map (fun x-> get_end x) infected);;
    
let infectionProcess graph node= 
    let cmp (a:char) (b:char)= if a>b then 1 else if a<b then -1 else 0 in
    let afterOneStep nodes= List.sort_uniq cmp (List.concat ((List.map (fun x-> oneStepInfection graph x) nodes))) in
    let rec infect subgraph= let newSub= afterOneStep subgraph in if newSub=subgraph then subgraph else infect newSub in infect [node];;

let mostInfectious graph=
    let cmp x y= if List.length (infectionProcess graph x) >= List.length (infectionProcess graph y) then x else y in
    List.fold_right cmp graph.nodes (List.hd graph.nodes);;
